---
hostname: kite

package_list:
  - name: curl
  - name: git
  - name: htop
  - name: sudo
  - name: wget

## COMPOSE-GEN
docker_user: "{{ vault.user }}"
docker_dir: "/home/{{ vault.user }}/docker"
compose_containers:
  ### HCI
  hci-website:
    services:
      bnuuy:
        container_name: bnuuy
        ports:
          - "8020:8000"
        image: crccheck/hello-world
        volumes:
          - ./web:/www
        restart: unless-stopped
  ### SHIORI
  shiori:
    services:
      shiori:
        image: radhifadlillah/shiori
        container_name: shiori
        ports:
          - "8070:8080"
        volumes:
          - "./config:/srv/shiori"
        restart: unless-stopped
  ### CHANGE DETECTION
  changedetection:
    services:
      changedetection:
        image: ghcr.io/dgtlmoon/changedetection.io
        container_name: changedetection
        environment:
          - BASE_URL=https://change.bnuuy.net
        volumes:
          - ./data:/datastore
        ports:
          - 5003:5000
        restart: unless-stopped
  ### UPTIME KUMA
  uptime_kuma:
    services:
      uptime-kuma:
        image: louislam/uptime-kuma:1
        container_name: uptime-kuma
        volumes:
          - ./data:/app/data
        ports:
          - 3001:3001
        restart: unless-stopped
  ### MKDOCS
  mkdocs:
    services:
      mkdocs:
        container_name: mkdocs
        ports:
          - 8000:8000
        volumes:
          - .:/docs
        image: squidfunk/mkdocs-material
        restart: unless-stopped
  audiobookshelf:
    services:
      audiobookshelf:
        container_name: audiobookshelf
        image: ghcr.io/advplyr/audiobookshelf
        ports:
          - 13378:80
        volumes:
          - /mnt/storage:/storage
          - ./metadata:/metadata
          - ./config:/config
        restart: unless-stopped
  freshrss:
    services:
      freshrss:
        image: freshrss/freshrss:edge
        container_name: freshrss
        restart: unless-stopped
        logging:
          options:
            max-size: 10m
        volumes:
          # Recommended volume for FreshRSS persistent data such as configuration and SQLite databases
          - ./data:/var/www/FreshRSS/data
          # Optional volume for storing third-party extensions
          - ./extensions:/var/www/FreshRSS/extensions
          # Optional file providing custom global settings (used before a FreshRSS install)
          # - ./config.custom.php:/var/www/FreshRSS/data/config.custom.php
          # Optional file providing custom user settings (used before a new user is created)
          # - ./config-user.custom.php:/var/www/FreshRSS/data/config-user.custom.php
        ports:
          - "8036:80"
        environment:
          TZ: Europe/Amsterdam
          CRON_MIN: "*/20"
          FRESHRSS_ENV: development
          FRESHRSS_USER: |-
            --api_password ${ADMIN_API_PASSWORD}
            --email ${ADMIN_EMAIL}
            --language en
            --password ${ADMIN_PASSWORD}
            --user admin
  openbooks:
    services:
      openbooks:
        ports:
          - "8033:80"
        volumes:
          - "./books:/books"
        restart: unless-stopped
        container_name: openbooks
        command: --name uwumiii --persist
        image: evanbuss/openbooks:latest
  immich:
    #
    # WARNING: Make sure to use the docker-compose.yml of the current release:
    #
    # https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
    #
    # The compose file on main may not be compatible with the latest release.
    #
    name: immich

    services:
      immich-server:
        container_name: immich_server
        image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
        command: ["start.sh", "immich"]
        volumes:
          - ${UPLOAD_LOCATION}:/usr/src/app/upload
          - /etc/localtime:/etc/localtime:ro
        env_file:
          - .env
        ports:
          - 2283:3001
        depends_on:
          - redis
          - database
        restart: always

      immich-microservices:
        container_name: immich_microservices
        image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
        # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
        #   file: hwaccel.transcoding.yml
        #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
        command: ["start.sh", "microservices"]
        volumes:
          - ${UPLOAD_LOCATION}:/usr/src/app/upload
          - /etc/localtime:/etc/localtime:ro
        env_file:
          - .env
        depends_on:
          - redis
          - database
        restart: always

      immich-machine-learning:
        container_name: immich_machine_learning
        # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
        # Example tag: ${IMMICH_VERSION:-release}-cuda
        image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
        # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
        #   file: hwaccel.ml.yml
        #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
        volumes:
          - model-cache:/cache
        env_file:
          - .env
        restart: always

      redis:
        container_name: immich_redis
        image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
        restart: always

      database:
        container_name: immich_postgres
        image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
        environment:
          POSTGRES_PASSWORD: ${DB_PASSWORD}
          POSTGRES_USER: ${DB_USERNAME}
          POSTGRES_DB: ${DB_DATABASE_NAME}
        volumes:
          - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
        restart: always

    volumes:
      model-cache:
  # STIRLING PDF
  stirling-pdf:
    services:
      stirling-pdf:
        image: frooodle/s-pdf:latest
        container_name: stirling-pdf
        restart: unless-stopped
        ports:
          - "8800:8080"
        volumes:
          - ./training:/usr/share/tessdata #Required for extra OCR languages
          - ./configs:/configs
        #      - /location/of/customFiles:/customFiles/
        #      - /location/of/logs:/logs/
        environment:
          - DOCKER_ENABLE_SECURITY=false
          - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false
          - LANGS=en_GB
