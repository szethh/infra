{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bnuuy docs","text":"<p>Documentation for my home servers.</p>"},{"location":"argo/","title":"Argo tunnel &amp; reverse proxy setup","text":"<p>To avoid exposing ports on firewalls/routers we route all traffic through a Cloudflare Argo Tunnel. Most of the information is taken from this reddit tutorial.</p>"},{"location":"argo/#swag","title":"SWAG","text":"<p>The tunnel will point to a DigitalOcean droplet running LinuxServer's SWAG:</p> <pre><code>---\nversion: \"2.1\"\nservices:\n  swag:\n    image: ghcr.io/linuxserver/swag\n    container_name: swag\n    cap_add:\n      - NET_ADMIN\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Amsterdam\n      - URL=bnuuy.net\n      - SUBDOMAINS=wildcard\n      - VALIDATION=dns\n      - DNSPLUGIN=cloudflare\n    volumes:\n      - ./config:/config\n    ports:\n      - 443:443\n      - 80:80 # optional\n    network-mode: \"host\"\n    restart: unless-stopped\n</code></pre>"},{"location":"argo/#cloudflare-tunnel","title":"Cloudflare Tunnel","text":"<p>Inside the container, <code>nano /config/dns-conf/cloudlfare.ini</code> and fill in <code>dns_cloudflare_email</code> and <code>dns_cloudflare_api_key</code>.</p> <p>On the host:</p> <ol> <li> <p>Set up the Cloudflare repository and install cloudflared package: <code>sudo apt install cloudflared</code></p> </li> <li> <p>Setup cloudlfare tunnel:</p> </li> </ol> <pre><code>$ cloudflared tunnel login\n$ cloudflared tunnel create bnuuy\n$ cd /etc/cloudflared/\n$ ls -la --&gt; get the id (like &lt;tunnel-id&gt;.json)\n</code></pre> <p>Run <code>nano config.yml</code> and fill with:</p> <pre><code>tunnel: &lt;tunnel-id&gt;\ncredentials-file: /root/.cloudflared/&lt;tunnel-id&gt;.json\noriginRequest:\n  originServerName: bnuuy.net\n  no-tls-verify: true\n\ningress:\n  - hostname: \"*.bnuuy.net\"\n    service: https://localhost:443\n    no-tls-verify: true\n  - service: http_status:404\n</code></pre> <ol> <li>More cloudflare config</li> </ol> <pre><code>$ cloudflared tunnel route dns bnuuy cloud.bnuuy.net\n$ cloudflared tunnel run  --&gt; test to see if it works\n\n$ sudo cloudflared service install\n$ sudo cp -r ~/.cloudflared/* /etc/cloudflared/  --&gt; todo: is this up to date?\n$ sudo nano /etc/cloudflared/config.yml --&gt; change json location\n</code></pre> <p>We can then manage the <code>cloudlfared</code> daemon with:</p> <pre><code>sudo systemctl start cloudflared\nsudo systemctl enable cloudflared\nsudo systemctl status cloudflared\n</code></pre> <p>Proxy configurations are stored in: <code>~/docker/swag/config/nginx/proxy-confs</code>. After a file changes, the system restarts automatically to reflect the changes.</p> <p>To check for errors: <code>tail -f ~/docker/swag/config/nginx/log/nginx/error.log</code></p>"},{"location":"argo/#todo","title":"TODO","text":"<p>DNS resolution does not work from <code>nginx</code> (although it does work from inside the SWAG container). It may work by setting the appropriate <code>resolver</code> directive. This would be a great quality of life improvement, we could just use Tailscale's MagicDNS name to refer to services. For now, we need to use the associated Tailscale IP (thankfully it is static).</p>"},{"location":"argo/#update-local-domain","title":"UPDATE local domain","text":"<p>Most domains have been moved to an internal domain. Only accessible via tailscale. If you go to <code>non-existent-subdomain.bnuuy.net</code> (as in, not present in the proxy-confs) you will be redirected to that same subdomain, but on <code>bnn.net</code>.</p> <p><code>/config/nginx/site-confs/default.conf</code>:</p> <pre><code>server {\n\n  # other stuff...\n\n  location / {\n    # regex the subdomain\n    if ($host ~* ^(?!www\\.)(?&lt;subdomain&gt;.+)\\.bnuuy\\.net$) {\n      # don't cache the redirect\n      add_header Cache-Control \"no-cache, no-store, must-revalidate\";\n      # redirect (NOT PROXY PASS)\n      # to let the client resolve the domain\n      return 301 http://$subdomain.int.bnuuy.net$request_uri;\n    }\n\n    # fallback to 404 page\n    try_files $uri $uri/ /index.html /index.php?$args =404;\n}\n</code></pre>"},{"location":"cloudflare/","title":"Cloudflare setup","text":""},{"location":"cloudflare/#firewall","title":"firewall","text":"<ul> <li>block outside nl/spain</li> <li>exception for ntfy when comind from linode</li> </ul>"},{"location":"cloudflare/#dns","title":"dns","text":"<ul> <li>protonmail</li> <li>mc server</li> <li>argo entries</li> <li>misc</li> </ul>"},{"location":"nixos/","title":"Setup NixOS in LXC","text":"<p>This tutorial is outdated but still has useful pointers.</p> <p>Follow instructions here to generate the lxc template.</p> <p>Upload to proxmox using the webui. sample config file: <pre><code>arch: amd64\ncores: 2\nfeatures: nesting=1\nhostname: blokk\nmemory: 4096\nnet0: name=eth0,bridge=vmbr0,firewall=1,hwaddr=0A:A4:81:19:E3:EF,ip=dhcp,ip6=dhcp,type=veth\nostype: nixos\nrootfs: speed:subvol-103-disk-0,size=128G\nswap: 512\nunprivileged: 1\n\n\\# tailscale\nlxc.cgroup2.devices.allow: c 10:200 rwm\nlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file\n</code></pre></p> <p>Then, create a CT (nesting enabled). <code>pct enter 103</code> to attach to it. Every time we attach, we have to run <code>source /etc/set-environment</code>.</p>"},{"location":"nixos/#tailscale-setup","title":"Tailscale setup","text":"<p>As per the tailscale docs edit the container config <code>nano /etc/pve/lxc/103.conf</code> and add <pre><code>lxc.cgroup2.devices.allow: c 10:200 rwm\nlxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file\n</code></pre></p>"},{"location":"nixos/#configurationnix","title":"configuration.nix","text":"<p><code>/etc/nixos/configuration.nix</code> should look like this:</p> <pre><code>[nix-shell:~]$ cat /etc/nixos/configuration.nix \n{ pkgs, modulesPath, ... }:\n\n{\n  imports = [\n    (modulesPath + \"/virtualisation/proxmox-lxc.nix\")\n  ];\n\n  time.timeZone = \"Europe/Amsterdam\";\n\n  networking.hostName = \"blokk\"; # Define your hostname.\n  networking.nameservers = [ \"1.1.1.1\" \"9.9.9.9\" ];\n\n  environment.systemPackages = with pkgs; [\n    tailscale\n    htop\n  ];\n\n  users.groups.szeth = {\n    gid = 1000;\n  };\n\n  users.users.szeth = {\n    isNormalUser = true;\n    description = \"szeth\";\n    extraGroups = [ \"networkmanager\" \"wheel\" \"docker\" ];\n    packages = with pkgs; [\n    #  firefox\n    #  thunderbird\n    ];\n\n    uid = 1000;\n    group = \"szeth\";\n    openssh.authorizedKeys.keys = [\n    # Add more SSH public keys if needed, each on a new line.\n    \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDgnIn7uXqucLjBn3fcJtRoeTVtpAIs/vFub8ULiud1f szeth@mackie.local\"\n   ];\n  };\n\n  virtualisation.docker.enable = true;\n\n  # Enable the OpenSSH daemon.\n  services.openssh.enable = true;\n  services.tailscale.enable = true;\n\n  nix.settings.experimental-features = \"nix-command flakes\";\n\n}\n</code></pre>"},{"location":"nixos/#note-on-proxmox-template","title":"Note on proxmox template","text":"<p>I made a lxc template (id 103), however i forgot to set the ssh public key for my mac (see above nix file).</p> <p>I also forgot to run passwd... So run passwd for root and passwd szeth for the user.</p> <p>Also, tailscale is installed but <code>tailscale up</code> must be run to login and register the container.</p>"},{"location":"nixos/#bind-mount","title":"Bind mount","text":"<p>To pass a folder into the container, run <code>pct set 100 -mp0 /mnt/storage,mp=/mnt/storage</code>.</p> <p>The permissions will be fucked. 3 files must be edited:</p> <p>Host: <code>/etc/subuid</code> <pre><code>root:100000:65536\nvalorad:165536:65536\nroot:1000:1\n</code></pre></p> <p>Host: <code>/etc/subgid</code> <pre><code>root:100000:65536\nvalorad:165536:65536\nroot:1000:1\n</code></pre></p> <p>Add this to the bottom of <code>/etc/pve/lxc/100.conf</code> and reboot the lxc: <pre><code>lxc.idmap: u 0 100000 1000\nlxc.idmap: g 0 100000 1000\nlxc.idmap: u 1000 1000 1\nlxc.idmap: g 1000 1000 1\nlxc.idmap: u 1001 101001 64530\nlxc.idmap: g 1001 101001 64530\n</code></pre></p>"},{"location":"proxmox_gpu/","title":"setup stuff from here","text":"<p>https://www.reddit.com/r/homelab/comments/b5xpua/the_ultimate_beginners_guide_to_gpu_passthrough/</p> <p>10de:1c03 10de:10f1</p> <p>echo \"options vfio-pci ids=10de:1c03,10de:10f1 disable_vga=1\"&gt; /etc/modprobe.d/vfio.conf</p> <p>https://www.youtube.com/watch?v=BoMlfk397h0</p> <p>if code 43 on gpu, mount cdrom with virtio tools and run the executable <code>virtio-win-guest-tools</code></p> <p>https://forum.proxmox.com/threads/pci-gpu-passthrough-on-proxmox-ve-8-installation-and-configuration.130218/</p> <p>https://forum.proxmox.com/threads/pci-gpu-passthrough-on-proxmox-ve-8-windows-10-11.131002/</p> <p>GP.rom is obtained from gpu-z</p> <p>python3 nvidia_vbios_vfio_patcher.py -i GP.rom -o /usr/share/kvm/gtx1060_2.rom</p> <p>/etc/pve/qemu-server/101.conf</p> <p>args: -cpu 'host,hv_ipi,hv_relaxed,hv_reset,hv_runtime,hv_spinlocks=0x1fff,hv_stimer,hv_synic,hv_time,hv_vapic,hv_vpindex,kvm=off,+kvm_pv_eoi,+kvm_pv_unhalt,+pcid,hv_vendor_id=NV43FIX'</p>"},{"location":"proxmox_gpu/#windows-autologin","title":"windows autologin","text":"<p>install windows sysinternals and run Autologon64, input password.</p> <p>activate windows with MAS</p> <p>set steam custom logos from steam grid db</p>"},{"location":"services/","title":"Services","text":""},{"location":"services/#paperless-ngx","title":"paperless-ngx","text":"<p>Synced with <code>mega-sync ~/docker/paperless-ngx/documents/media/documents/originals /Documents/papers</code></p>"},{"location":"services/#mkdocs","title":"mkdocs","text":"<p>Synced with <code>mega-sync ~/docker/mkdocs/docs /Documents/homelab/docs</code></p>"}]}